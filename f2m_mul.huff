
template<val>
#define macro AWKWARD_ADD = takes(0) returns(1) {
  <val>
}

#define macro F2M_MUL_BUFFER = takes(0) returns(1) {
    0	// TODO: update this variable to the fixed memory buffer offset used by F2M_MUL
}

#define macro F2M_MUL = takes(4) returns(0) {
  // input stack shoud be:
  //  &out &x &y &mod_and_inv
  //  where &x is top of stack, and x is the 48-byte value at memory location &x

  // prepare for computation by setting up stack to:
  //   &x0 &x1 &y0 &y1 &mod inv &out0 &out1
  dup1
  48
  add		// &out1
  dup2		// &out0
  dup6
  48
  add
  mload		// inv
  dup7		// &mod
  dup7
  48
  add		// &y1
  dup8		// &y0
  dup8
  48
  add		// &x1
  dup9		// &x0

  // Will use memory offsets for temporary values
  //F2M_MUL_BUFFER()+48		// &zero
  //F2M_MUL_BUFFER()+96		// &tmp1
  //F2M_MUL_BUFFER()+144	// &tmp2
  //F2M_MUL_BUFFER()+192	// &tmp3
  
  // &tmp1 = x0*y0
  dup6			// inv
  dup6			// &mod
  dup5			// &y0
  dup4			// &x0
  AWKWARD_ADD<F2M_MUL_BUFFER+96>()	// &tmp1
  mulmodmont384

  // &tmp2 = x1*y1
  dup6			// inv
  dup6			// &mod
  dup6			// &y1
  dup5			// &x1
  AWKWARD_ADD<F2M_MUL_BUFFER+144>()	// &tmp2
  mulmodmont384
  
  // &tmp3 = 0-&tmp2
  dup5			// &mod
  AWKWARD_ADD<F2M_MUL_BUFFER+144>()	// &tmp2
  AWKWARD_ADD<F2M_MUL_BUFFER+48>()	// &zero
  AWKWARD_ADD<F2M_MUL_BUFFER+192>()	// &tmp3
  submod384

  // &out0 = &tmp1 + &tmp3
  dup5			// &mod
  AWKWARD_ADD<F2M_MUL_BUFFER+192>()	// &tmp3
  AWKWARD_ADD<F2M_MUL_BUFFER+96>()	// &tmp1
  dup10			// &out0
  addmod384
  
  // &tmp1 = &tmp1 + &tmp2
  dup5			// &mod
  AWKWARD_ADD<F2M_MUL_BUFFER+144>()	// &tmp2
  AWKWARD_ADD<F2M_MUL_BUFFER+96>()	// &tmp1
  AWKWARD_ADD<F2M_MUL_BUFFER+96>()	// &tmp1
  addmod384
  
  // recall, stack looks like:
  //   &x0 &x1 &y0 &y1 &mod inv &out0 &out1

  // &tmp2 = &x0 + &y0
  dup5
  dup2
  dup5
  AWKWARD_ADD<144+F2M_MUL_BUFFER+144>()	// &tmp2
  addmod384
  
  // &tmp3 = &x1 + &y1
  dup5
  dup3
  dup6
  AWKWARD_ADD<F2M_MUL_BUFFER+192>()	// &tmp3
  addmod384

  // &tmp2 = &tmp2 * &tmp3
  dup6
  dup6
  AWKWARD_ADD<F2M_MUL_BUFFER+192>()	// &tmp3
  AWKWARD_ADD<F2M_MUL_BUFFER+144>()	// &tmp2
  AWKWARD_ADD<F2M_MUL_BUFFER+144>()	// &tmp2
  mulmodmont384

  // &out1 = &tmp2 - &tmp1
  dup5
  AWKWARD_ADD<F2M_MUL_BUFFER+96>()	// &tmp1
  AWKWARD_ADD<F2M_MUL_BUFFER+144>()	// &tmp2
  dup11			// &out1
  submod384

  // clear stack
  pop
  pop
  pop
  pop
  pop
  pop
  pop
  pop
  pop
  pop
  pop
  pop
}

#define macro TEST_CONSTRUCTOR = takes(0) returns(0) {}

